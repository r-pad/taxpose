name: Run Tests

on:

  workflow_call:
    inputs:
      install_string:
        required: True
        type: string

jobs:
  compute-tag:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - id: set_tag
        run: |
          branch_name="${{ github.head_ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            sanitized_branch_name="${branch_name//\//-}"
            echo "tag=${sanitized_branch_name}" >> $GITHUB_OUTPUT
          else
            sanitized_branch_name="${GITHUB_REF#refs/heads/}"
            sanitized_branch_name="${sanitized_branch_name//\//-}"
            echo "tag=${sanitized_branch_name}" >> $GITHUB_OUTPUT
          fi
  test:
    runs-on: ubuntu-latest

    # Needs "docker" and "compute-tag" to complete before running.
    needs: [compute-tag, docker]
    if: always()

    container:
      # Image tag is "latest" if the branch is main, else it is the branch name.
      image: ${{ secrets.DOCKERHUB_USERNAME }}/taxpose:${{ needs.compute-tag.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      ##############################################
      # Skip caching if using a local runner.
      # - uses: actions/setup-python@v4
      #   if: ${{ !env.ACT }}
      #   with:
      #     python-version: '3.9'
      #     cache: 'pip'
      #     cache-dependency-path: "pyproject.toml"
      # - uses: actions/setup-python@v4
      #   if: ${{ env.ACT }}
      #   with:
      #     python-version: '3.9'
      ##############################################

      # - name: Install specific pip.
      #   run: pip install pip==23.0.0

      # - name: Install CPU version of torch.
      #   run: pip install torch==1.11.0+cpu torchvision==0.12.0+cpu --extra-index-url https://download.pytorch.org/whl/cpu

      # - name: Install the torch-geometric.
      #   run: pip install pyg_lib==0.1.0 torch_scatter==2.0.9 torch_sparse==0.6.15 torch_cluster==1.6.0 torch_spline_conv==1.2.1 -f https://data.pyg.org/whl/torch-1.11.0+cpu.html

      # - name: Install pytorch3d dependencies.
      #   run: pip install fvcore iopath

      # - name: Install pytorch3d
      #   run: pip install --no-index --no-cache-dir pytorch3d -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py39_cu113_pyt1110/download.html
        # run: pip install pytorch3d

      # - name: Install package
      #   run: pip install "${{ inputs.install_string }}"

      # - name: Install ndf_robot
      #   run: pip install -e third_party/ndf_robot

      - name: Code Quality
        run: python -m black taxpose/ tests/ --check

      - name: MyPy Typechecking
        run: python -m mypy taxpose/ tests/

      # Run tests.
      # # SKIPPING BECAUSE OF PYTORCH3D IMPORT ISSUES... Prebuilt Linux binaries demand torch CUDA.
      # - name: Test with pytest
        # run: python -m pytest
